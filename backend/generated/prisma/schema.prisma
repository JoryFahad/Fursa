generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  passwordHash   String
  role           Role
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  refreshToken   String?
  studentProfile StudentProfile?
  companyProfile CompanyProfile?
}

model StudentProfile {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int           @unique
  fullName       String?
  university     String?
  major          String?
  graduationYear Int?
  applications   Application[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model CompanyProfile {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int          @unique
  companyName String?
  industry    String?
  website     String?
  internships Internship[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Internship {
  id                  Int            @id @default(autoincrement())
  company             CompanyProfile @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId           Int
  title               String
  description         String
  location            String
  isRemote            Boolean
  duration            String
  applicationDeadline DateTime
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  isDeleted           Boolean        @default(false)
  isOpen              Boolean        @default(true)
  applications        Application[]
}

model Application {
  id              Int               @id @default(autoincrement())
  internship      Internship        @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  internshipId    Int
  student         StudentProfile    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       Int
  resumePath      String?
  coverLetterPath String?
  status          ApplicationStatus @default(SUBMITTED)
  appliedAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([internshipId, studentId])
}

enum Role {
  student
  company
  admin
}

enum ApplicationStatus {
  SUBMITTED
  IN_REVIEW
  ACCEPTED
  REJECTED
}
